// Задание «Сложные вычисления»

// Условие задачи
// Иногда приходится создавать логику, которая, 
// несмотря на отсутствие высоких вычислительных требований, 
// занимает значительное время при выполнении. В связи с тем, что JavaScript 
// работает в однопоточной среде, другие части программы, ожидающие исполнения, 
// должны задерживаться до завершения этих сложных вычислений.

// Например, когда функция Фибоначчи вызывается с определёнными значениями, 
// она может выполняться несколько секунд, что существенно для скорости работы кода.

// В качестве задачи асинхронного программирования необходимо разработать функциональность, 
// которая решит данную проблему. Это позволит коду, который долго выполняется, 
// не блокировать другие части программы, которые должны быть выполнены в соответствующей 
// последовательности.


export const complexCalc = function (count) {
    function fib(n) {
      return n <= 1 ? n : fib(n - 1) + fib(n - 2);
    }

    return new Promise((resolve, reject) => {
        setTimeout(() => {
            try {
                resolve(fib(count));
            } catch (error) {
                reject(error);
            }
        }, 0);
    });
    


    /*
     * Необходимо реализовать функциональность, которая,
     * запуская функцию Фибоначчи, не будет блокировать
     * выполнение следующей функциональности. При этом
     * следует учитывать, что выполнение функции Фибоначчи
     * может аварийно остановить всю программу.
     */
};


console.log("Основная логика что-то выполняет здесь");

complexCalc(8).then((result) => console.log(result));

console.log("Основная логика тоже что-то выполняет здесь");

complexCalc(41).then((result) => console.log(result));

console.log("Основная логика опять что-то выполняет здесь");

complexCalc(25000)
  .then((result) => console.log(result))
  .catch((error) => {
    console.log("Произошла ошибка:");
    console.log("Тип ошибки:", error.name);
    console.log("Описание ошибки:", error.message);
  });
