// Условие задачи
// Неотъемлемой частью нашей жизни являются сервисы и приложения, 
// которые позволяют нам отправлять или переводить денежные средства, 
// не посещая банковское учреждение. Мы можем достать телефон из кармана 
// и сидя дома производить различные финансовые транзакции. 
// При этом очень важно проверять достаточно ли денежных средств для транзакции.

// Необходимо реализовать логику функции проверки отправляемой суммы средств. 
// Если сумма отрицательная, то необходимо аварийно завершить процесс отправки. 
// То есть необходимо сгенерировать собственную ошибку, которая будет в себе содержать информацию:

// name: “NegativeAmountError”;
// message: “Недопустимое значение суммы денежных средств. 
// Нельзя отправлять отрицательную сумму.”
// Программисты считают, что генерировать собственные ошибки – 
// это очень плохое правило программирования. Но есть случаи, 
// при которых возникает необходимость аварийно остановить выполнение логики. 
// Оправданность такой остановки выполнения обязательно должна перевешивать 
// аргументы и целесообразность отказоустойчивости программ.

// В примере с проверкой значения суммы средств, которые пользователь собирается 
// отправить, вполне можем оправдать генерацию собственной ошибки. 
// Лучше выполнение перевода в целом завершиться аварийно, 
// чем у получателя спишутся средства из-за того, 
// что логика отправила отрицательное значение. 
// Велика вероятность, что сгенерированную ошибку перехватят и обработают, 
// не дав сломаться приложению.
class NegativeAmountError extends Error {
    constructor() {
        super("Недопустимое значение суммы денежных средств. Нельзя отправлять отрицательную сумму.");
        this.name = 'NegativeAmountError';
    }
}

const validate = function (amount) {
    /*
     * Необходимо реализовать проверку суммы средств перед
     * отправкой и завершением процесса перевода. Если
     * в данную функцию передаётся отрицательная сумма
     * средств (что невозможно в реальном мире), то необходимо
     * сгенерировать ошибку, чтобы логика на уровне вызова этой ошибки
     * прекратила процесс перевода и правильно обработала причину
     * отмены перевода.
     * 
     * Перехватывая сгенерированную ошибку ожидается, что у ошибки
     * будет:
     *   - name: "NegativeAmountError"
     *   - message: "Недопустимое значение суммы денежных средств. Нельзя отправлять отрицательную сумму."
     */

    if (amount < 0) {
        throw new NegativeAmountError();
    } 

    return amount;
};


let amount = 426;

try {
  validate(amount);
} catch (error) {
  // Ожидаем что этот блок не сработает для amount = 426
  console.log("сумма =", amount);
  console.log("Ошибка:", error.name);
  console.log("Описание:", error.message);
}

amount = -17;

try {
  validate(amount);
} catch (error) {
  // Ожидаем что этот блок сработает для amount = -17
  console.log("сумма =", amount);
  console.log(error.name); // Ожидаем имя ошибки - "NegativeAmountError"
  console.log(error.message); // Ожидаем описание ошибки - "Недопустимое значение суммы денежных средств. Нельзя отправлять отрицательную сумму.
  console.log("Дебаг ошибки:", JSON.stringify(error, null, 2));
}
