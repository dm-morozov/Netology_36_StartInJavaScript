// Условие задачи
// Давайте попрактикуемся в использовании такого подхода в программировании, как ООП (объектно-ориентированное программирование). ООП помагает программистам описывать объекты и поведение объектов реального мира с помощью классов, которые также присутствуют в JavaScript.

// ООП опирается на 4 принципа:

// инкапсуляция;
// абстракция;
// наследование;
// полиморфизм.
// Начнём с самого первого принципа – инкапсуляция. А в качестве объекта реального мира будем использовать пчелу.

// Пчёлы доказали свою полезность человечеству очень давно. Они дарят нам вкусное и полезное лакамство – мёд. Давайте подумаем, как можно описать пчелу с помощью кода?

// Для начала, что мы можем знать о пчёлах?

// Пчела имеет определённый возраст.
// Пчела умеет летать.
// Пчела работает, чтобы произвести мёд.
// Ну и в качестве некоего допущения, как для домашнего питомца, пчеле можно дать кличку.
// Всё, что перечислено выше, достаточно для описания свойств и поведения реального объекта «пчела». По форме – это насекомое, которое производит мёд, а его содержание можно описать с помощью 4 пунктов. Это и есть инкапсуляция – данные об объекте объединяются с функциями объекта, которые являются его поведением.

// В практическом смысле этого задания необходимо описать класс «Пчела», который будет инкапсулировать в себе характеристики и поведение пчелы. С помощью конструктора (constructor) задаётся имя и возраст пчелы. Это свойства объекта «Пчела». Поэтому конструктор должен принимать 2 параметра:

// name – имя пчелы типа string;
// age – возраст пчелы типа number.
// Помимо свойств необходимо реализовать 2 метода, которые описывают поведение пчелы:

// fly – метод выводит в консоль сообщение вида:
// Пчёлка Майя летит

// где Пчёлка Майя это name объекта. Метод ничего не принимает в качестве параметров. А в качестве результата ничего не возвращает.

// work – метод выводит в консоль сообщение вида:
// Пчёлка Майя собирает пыльцу

// где Пчёлка Майя это name объекта. Метод ничего не принимает в качестве параметров. А в качестве результата ничего не возвращает.


class Bee {
    /*
    * Необходимо описать класс Пчела, который будет
    * инкапсулировать в себе характеристики и поведение
    * пчелы. С помощью конструктора (constructor) задаётся
    * имя и возраст пчелы. Это свойства объекта "Пчела".
    * Поэтому конструктор должен принимать 2 параметра:
    * - name - имя пчелы типа string;
    * - age - возраст пчелы типа number.
    * Помимо свойств необходимо реализовать 2 метода,
    * которые описывают поведение пчелы:
    * - fly - метод выводит в консоль сообщение вида:
    * 
    *     Пчёлка Майя летит
    * 
    *   где Пчёлка Майя это name объекта. Метод ничего
    *   не принимает в качестве параметров. А в качестве
    *   результата ничего не возвращает.
    * - work - метод выводит в консоль сообщение вида:
    * 
    *     Пчёлка Майя собирает пыльцу
    * 
    *   где Пчёлка Майя это name объекта. Метод ничего
    *   не принимает в качестве параметров. А в качестве
    *   результата ничего не возвращает.
    */

    constructor(name, age, type = "Обычная пчела") {
        this.type = type;
        this.name = name;
        this.age = age;
      }

    fly() {
        console.log(`${this.name} летит`);
    }

    work() {
        console.log(`${this.name}  собирает пыльцу`)
    }
}


/*
 * Необходимо описать класс Пчела-Королева, который является
 * потомком от класса Пчела (Bee). Королева, работая, производит
 * новых пчел в рое. Поэтому реализуйте метод
 * work, который выводит в консоль сообщение вида:
 *
 *    Я Мария Медоносная! Я приумножаю данный рой новыми пчёлами
 *
 * где Мария Медоносная – это name объекта.
 */
class QueenBee extends Bee {
    constructor(name, age) {
        super(name, age, 'королева');
    }

    work() {
        console.log(`Я ${this.name}! Я приумножаю данный рой новыми пчёлами`);
    }

    /*
    * Необходимо переопределить базовый метод fly, который для всех
    * экземпляров данного класса будет выводить в консоль сообщения:
    *
    *   Вообще-то благородным не пристало махать крыльями и куда-то летать!
    *   Всё, что нужно мне, приносят по несколько раз на день.
    *
    */

    fly() {
        console.log(`Вообще-то благородным не пристало махать крыльями и куда-то летать!`)
        console.log(`Всё, что нужно мне, приносят по несколько раз на день.`)
    }

}

/*
* Необходимо описать класс Пчела-Страж, который является
* потомком от класса Пчела (Bee). Вот только, работая, пчела-страж
* выполняет отличные от других обязанности. Поэтому реализуйте метод
* work, который выводит в консоль сообщение вида:
*
*    Страж. Мои задачи - охранять данный рой.
*
* где Страж – это name объекта.
*/
class DefenderBee extends Bee {
    constructor(name, age) {
        super(name, age, 'страж');
    }
    work() {
        console.log(`${this.name}. Мои задачи - охранять данный рой.`);
    }

    /*
    * Необходимо переопределить базовый метод fly, который для всех
    * экземпляров данного класса будет выводить в консоль сообщение
    * вида:
    *
    *   База. База. Я Грозный. Совершаю облёт и патрулирование места обитания. Приём.
    *
    * где Грозный - это имя экземпляра класса DefenderBee
    */

    fly() {
        console.log(`База. База. Я ${this.name}. Совершаю облёт и патрулирование места обитания. Приём.`)
    }
    
}

/*
 * Необходимо описать класс Пчела-Собиратель, который является
 * потомком от класса Пчела (Bee). Вот только, работая, пчела-собиратель
 * занимается сбором пыльцы и нектара. Поэтому реализуйте метод
 * work, который выводит в консоль сообщение вида:
 *
 *    Пчёлка собирает пыльцу
 *
 * где Пчёлка – это name объекта.
 */
class HoneyBee extends Bee {
    constructor(name, age) {
        super(name, age, 'собиратель');
    }

    work() {
        console.log(`${this.name} собирает пыльцу`);
    }

    /*
    * Необходимо переопределить базовый метод fly, который для всех
    * экземпляров данного класса будет выводить в консоль сообщения:
    * - если возраст (age) меньше 30, то
    *
    *     Пчёлка Майя летит
    *
    *   где Пчёлка Майя - это имя (name) данного экземпляра класса
    * - если возраст (age) больше либо равен 30, то
    *
    *     Пчёлка Майя летит
    *     За водой
    *
    *   где Пчёлка Майя - это имя (name) данного экземпляра класса
    */

    fly() {
        super.fly();
        if (this.age <= 30) console.log('За водой');
    }
}


const bee = new Bee("Пчёлка", 27);

console.log("Пчела по имени", bee.name);
console.log(`${bee.name} возрастом ${bee.age} дней`);

bee.fly();
bee.work();


const swarm = [];

swarm.push(new QueenBee("Изабелла Великолепная", 127));
swarm.push(new DefenderBee("Охранник", 17));
swarm.push(new HoneyBee("Майя", 31));
swarm.forEach((bee) => {
  bee.fly();
  bee.work();
});


const swarm2 = [];
const simpleBee = new HoneyBee("Майя", 25);

swarm2.push(new QueenBee("Изабелла Великолепная", 127));
swarm2.push(new DefenderBee("Охранник", 17));
swarm2.push(simpleBee);
swarm2.forEach((bee) => {
  bee.fly();
});

simpleBee.age = 32;
simpleBee.fly();